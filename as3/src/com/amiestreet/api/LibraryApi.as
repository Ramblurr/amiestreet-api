/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.amiestreet.api {

  import flash.net.Responder;
  import flash.net.NetConnection;

  public class LibraryApi {
    private var connection:NetConnection;

    public function LibraryApi(conn:NetConnection) {
      connection = conn;
    }

    public function numSongs(user:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Object):void {
          if(onSuccess != null) {
            onSuccess(new int(result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.numSongs', resp, {user: user});
    } // end numSongs

    public function songs(user:String, page:int, limit:int, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Object):void {
          if(onSuccess != null) {
            onSuccess(new PagedSongListVO(result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.songs', resp, {user: user, page: page, limit: limit});
    } // end songs

    public function artists(user:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Array):void {
          if(onSuccess != null) {
            onSuccess(ThriftUtils.makeList(ArtistVO, result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.artists', resp, {user: user});
    } // end artists

    public function albums(user:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Array):void {
          if(onSuccess != null) {
            onSuccess(ThriftUtils.makeList(AlbumVO, result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.albums', resp, {user: user});
    } // end albums

    public function genres(user:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Array):void {
          if(onSuccess != null) {
            onSuccess(ThriftUtils.makeList(GenreVO, result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.genres', resp, {user: user});
    } // end genres

    public function banSong(fingerprint:String, songId:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Object):void {
          if(onSuccess != null) {
            onSuccess(new Boolean(result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.banSong', resp, {fingerprint: fingerprint, songId: songId});
    } // end banSong

    public function banSongList(fingerprint:String, songIdList:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Object):void {
          if(onSuccess != null) {
            onSuccess(new Boolean(result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.banSongList', resp, {fingerprint: fingerprint, songIdList: songIdList});
    } // end banSongList

    public function unbanSong(fingerprint:String, songId:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Object):void {
          if(onSuccess != null) {
            onSuccess(new Boolean(result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.unbanSong', resp, {fingerprint: fingerprint, songId: songId});
    } // end unbanSong

    public function unbanSongList(fingerprint:String, songIdList:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Object):void {
          if(onSuccess != null) {
            onSuccess(new Boolean(result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.unbanSongList', resp, {fingerprint: fingerprint, songIdList: songIdList});
    } // end unbanSongList

    public function bannedSongs(user:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Array):void {
          if(onSuccess != null) {
            onSuccess(ThriftUtils.makeList(SongVO, result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.bannedSongs', resp, {user: user});
    } // end bannedSongs

    public function refreshLibrary(user:String, songIds:String, onSuccess:Function = null, onError:Function = null):void {
      var resp:Responder = new Responder(
        function(result:Array):void {
          if(onSuccess != null) {
            onSuccess(ThriftUtils.makeList(SongVO, result));
          }
        },
        function(error:Object):void {
          if(onError != null) {
            onError(error);
          }
        });
      connection.call('LibraryApi.refreshLibrary', resp, {user: user, songIds: songIds});
    } // end refreshLibrary

  }
}
